// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SignUp renders correctly 1`] = `
<RCTScrollView>
  <View>
    <View
      className="mt-24 p-4 pb-12"
    >
      <Text
        className="text-typography-700 font-body font-bold text-3xl mt-8 mb-8"
      >
        Create your Account
      </Text>
      <View
        onLayout={[Function]}
      >
        <View
          style={
            {
              "bottom": 0,
            }
          }
        >
          <View
            className="flex-col"
            testID="sign-up-form"
          >
            <View
              className="flex flex-col"
              dataSet={
                {
                  "disabled": "false",
                  "invalid": "false",
                }
              }
              feedbackId="field-1-feedback"
              hasFeedbackText={true}
              hasHelpText={false}
              helpTextId="field-1-helptext"
              id="field-1"
              isReadOnly={false}
              isRequired={true}
              labelId="field-1-label"
              setHasFeedbackText={[Function]}
              setHasHelpText={[Function]}
              states={
                {
                  "disabled": false,
                  "invalid": false,
                }
              }
            >
              <View
                className="flex flex-row justify-start items-center mb-1"
                feedbackId="field-1-feedback"
                hasFeedbackText={true}
                hasHelpText={false}
                helpTextId="field-1-helptext"
                id="field-1-label"
                isDisabled={false}
                isInvalid={false}
                isReadOnly={false}
                labelId="field-1-label"
                setHasFeedbackText={[Function]}
                setHasHelpText={[Function]}
              >
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  Email Address
                </Text>
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  *
                </Text>
              </View>
              <View
                className="border-background-300 flex-row overflow-hidden content-center data-[hover=true]:border-outline-400 data-[focus=true]:border-primary-700 data-[focus=true]:hover:border-primary-700 data-[disabled=true]:opacity-40 data-[disabled=true]:hover:border-background-300 items-center h-11 rounded border data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700 data-[focus=true]:web:ring-1 data-[focus=true]:web:ring-inset data-[focus=true]:web:ring-indicator-primary data-[invalid=true]:web:ring-1 data-[invalid=true]:web:ring-inset data-[invalid=true]:web:ring-indicator-error data-[invalid=true]:data-[focus=true]:hover:web:ring-1 data-[invalid=true]:data-[focus=true]:hover:web:ring-inset data-[invalid=true]:data-[focus=true]:hover:web:ring-indicator-error data-[invalid=true]:data-[disabled=true]:hover:web:ring-1 data-[invalid=true]:data-[disabled=true]:hover:web:ring-inset data-[invalid=true]:data-[disabled=true]:hover:web:ring-indicator-error my-1"
                dataSet={
                  {
                    "disabled": "false",
                    "focus": "false",
                    "focusVisible": "false",
                    "hover": "false",
                    "invalid": "false",
                    "readonly": "false",
                    "required": "true",
                  }
                }
                states={
                  {
                    "disabled": false,
                    "focus": false,
                    "focusVisible": false,
                    "hover": undefined,
                    "invalid": false,
                    "readonly": false,
                    "required": true,
                  }
                }
              >
                <TextInput
                  accessible={true}
                  aria-label="Input Field"
                  aria-required={true}
                  aria-selected={false}
                  autoCapitalize="none"
                  className="flex-1 text-typography-900 py-0 px-3 placeholder:text-typography-500 h-full ios:leading-[0px] web:cursor-text web:data-[disabled=true]:cursor-not-allowed web:outline-0 web:outline-none text-lg"
                  dataSet={
                    {
                      "disabled": "false",
                      "focus": "false",
                      "focusVisible": "false",
                      "hover": "false",
                      "invalid": "false",
                      "readonly": "false",
                      "required": "true",
                    }
                  }
                  onBlur={[Function]}
                  onChangeText={[Function]}
                  onFocus={[Function]}
                  onKeyPress={[Function]}
                  readOnly={false}
                  secureTextEntry={false}
                  states={
                    {
                      "disabled": undefined,
                      "focus": false,
                      "focusVisible": false,
                      "hover": undefined,
                      "invalid": false,
                      "readonly": false,
                      "required": true,
                    }
                  }
                  type="text"
                  value=""
                />
              </View>
            </View>
            <View
              className="flex flex-col mt-4"
              dataSet={
                {
                  "disabled": "false",
                  "invalid": "false",
                }
              }
              feedbackId="field-1-feedback"
              hasFeedbackText={true}
              hasHelpText={false}
              helpTextId="field-1-helptext"
              id="field-1"
              isReadOnly={false}
              isRequired={true}
              labelId="field-1-label"
              setHasFeedbackText={[Function]}
              setHasHelpText={[Function]}
              states={
                {
                  "disabled": false,
                  "invalid": false,
                }
              }
            >
              <View
                className="flex flex-row justify-start items-center mb-1"
                feedbackId="field-1-feedback"
                hasFeedbackText={true}
                hasHelpText={false}
                helpTextId="field-1-helptext"
                id="field-1-label"
                isDisabled={false}
                isInvalid={false}
                isReadOnly={false}
                labelId="field-1-label"
                setHasFeedbackText={[Function]}
                setHasHelpText={[Function]}
              >
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  Full Name
                </Text>
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  *
                </Text>
              </View>
              <View
                className="border-background-300 flex-row overflow-hidden content-center data-[hover=true]:border-outline-400 data-[focus=true]:border-primary-700 data-[focus=true]:hover:border-primary-700 data-[disabled=true]:opacity-40 data-[disabled=true]:hover:border-background-300 items-center h-11 rounded border data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700 data-[focus=true]:web:ring-1 data-[focus=true]:web:ring-inset data-[focus=true]:web:ring-indicator-primary data-[invalid=true]:web:ring-1 data-[invalid=true]:web:ring-inset data-[invalid=true]:web:ring-indicator-error data-[invalid=true]:data-[focus=true]:hover:web:ring-1 data-[invalid=true]:data-[focus=true]:hover:web:ring-inset data-[invalid=true]:data-[focus=true]:hover:web:ring-indicator-error data-[invalid=true]:data-[disabled=true]:hover:web:ring-1 data-[invalid=true]:data-[disabled=true]:hover:web:ring-inset data-[invalid=true]:data-[disabled=true]:hover:web:ring-indicator-error my-1"
                dataSet={
                  {
                    "disabled": "false",
                    "focus": "false",
                    "focusVisible": "false",
                    "hover": "false",
                    "invalid": "false",
                    "readonly": "false",
                    "required": "true",
                  }
                }
                states={
                  {
                    "disabled": false,
                    "focus": false,
                    "focusVisible": false,
                    "hover": undefined,
                    "invalid": false,
                    "readonly": false,
                    "required": true,
                  }
                }
              >
                <TextInput
                  accessible={true}
                  aria-label="Input Field"
                  aria-required={true}
                  aria-selected={false}
                  className="flex-1 text-typography-900 py-0 px-3 placeholder:text-typography-500 h-full ios:leading-[0px] web:cursor-text web:data-[disabled=true]:cursor-not-allowed web:outline-0 web:outline-none text-lg"
                  dataSet={
                    {
                      "disabled": "false",
                      "focus": "false",
                      "focusVisible": "false",
                      "hover": "false",
                      "invalid": "false",
                      "readonly": "false",
                      "required": "true",
                    }
                  }
                  onBlur={[Function]}
                  onChangeText={[Function]}
                  onFocus={[Function]}
                  onKeyPress={[Function]}
                  readOnly={false}
                  secureTextEntry={false}
                  states={
                    {
                      "disabled": undefined,
                      "focus": false,
                      "focusVisible": false,
                      "hover": undefined,
                      "invalid": false,
                      "readonly": false,
                      "required": true,
                    }
                  }
                  type="text"
                  value=""
                />
              </View>
            </View>
            <View
              className="flex flex-col mt-4"
              dataSet={
                {
                  "disabled": "false",
                  "invalid": "false",
                }
              }
              feedbackId="field-1-feedback"
              hasFeedbackText={true}
              hasHelpText={false}
              helpTextId="field-1-helptext"
              id="field-1"
              isReadOnly={false}
              isRequired={true}
              labelId="field-1-label"
              setHasFeedbackText={[Function]}
              setHasHelpText={[Function]}
              states={
                {
                  "disabled": false,
                  "invalid": false,
                }
              }
            >
              <View
                className="flex flex-row justify-start items-center mb-1"
                feedbackId="field-1-feedback"
                hasFeedbackText={true}
                hasHelpText={false}
                helpTextId="field-1-helptext"
                id="field-1-label"
                isDisabled={false}
                isInvalid={false}
                isReadOnly={false}
                labelId="field-1-label"
                setHasFeedbackText={[Function]}
                setHasHelpText={[Function]}
              >
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  Password
                </Text>
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  *
                </Text>
              </View>
              <View
                className="border-background-300 flex-row overflow-hidden content-center data-[hover=true]:border-outline-400 data-[focus=true]:border-primary-700 data-[focus=true]:hover:border-primary-700 data-[disabled=true]:opacity-40 data-[disabled=true]:hover:border-background-300 items-center h-11 rounded border data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700 data-[focus=true]:web:ring-1 data-[focus=true]:web:ring-inset data-[focus=true]:web:ring-indicator-primary data-[invalid=true]:web:ring-1 data-[invalid=true]:web:ring-inset data-[invalid=true]:web:ring-indicator-error data-[invalid=true]:data-[focus=true]:hover:web:ring-1 data-[invalid=true]:data-[focus=true]:hover:web:ring-inset data-[invalid=true]:data-[focus=true]:hover:web:ring-indicator-error data-[invalid=true]:data-[disabled=true]:hover:web:ring-1 data-[invalid=true]:data-[disabled=true]:hover:web:ring-inset data-[invalid=true]:data-[disabled=true]:hover:web:ring-indicator-error my-1"
                dataSet={
                  {
                    "disabled": "false",
                    "focus": "false",
                    "focusVisible": "false",
                    "hover": "false",
                    "invalid": "false",
                    "readonly": "false",
                    "required": "true",
                  }
                }
                states={
                  {
                    "disabled": false,
                    "focus": false,
                    "focusVisible": false,
                    "hover": undefined,
                    "invalid": false,
                    "readonly": false,
                    "required": true,
                  }
                }
              >
                <TextInput
                  accessible={true}
                  aria-label="Input Field"
                  aria-required={true}
                  aria-selected={false}
                  className="flex-1 text-typography-900 py-0 px-3 placeholder:text-typography-500 h-full ios:leading-[0px] web:cursor-text web:data-[disabled=true]:cursor-not-allowed web:outline-0 web:outline-none text-lg"
                  dataSet={
                    {
                      "disabled": "false",
                      "focus": "false",
                      "focusVisible": "false",
                      "hover": "false",
                      "invalid": "false",
                      "readonly": "false",
                      "required": "true",
                    }
                  }
                  onBlur={[Function]}
                  onChangeText={[Function]}
                  onFocus={[Function]}
                  onKeyPress={[Function]}
                  readOnly={false}
                  secureTextEntry={true}
                  states={
                    {
                      "disabled": undefined,
                      "focus": false,
                      "focusVisible": false,
                      "hover": undefined,
                      "invalid": false,
                      "readonly": false,
                      "required": true,
                    }
                  }
                  type="password"
                  value=""
                />
              </View>
            </View>
            <View
              className="flex flex-col mt-4"
              dataSet={
                {
                  "disabled": "false",
                  "invalid": "false",
                }
              }
              feedbackId="field-1-feedback"
              hasFeedbackText={true}
              hasHelpText={false}
              helpTextId="field-1-helptext"
              id="field-1"
              isReadOnly={false}
              isRequired={true}
              labelId="field-1-label"
              setHasFeedbackText={[Function]}
              setHasHelpText={[Function]}
              states={
                {
                  "disabled": false,
                  "invalid": false,
                }
              }
            >
              <View
                className="flex flex-row justify-start items-center mb-1"
                feedbackId="field-1-feedback"
                hasFeedbackText={true}
                hasHelpText={false}
                helpTextId="field-1-helptext"
                id="field-1-label"
                isDisabled={false}
                isInvalid={false}
                isReadOnly={false}
                labelId="field-1-label"
                setHasFeedbackText={[Function]}
                setHasHelpText={[Function]}
              >
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  Re-enter your Password
                </Text>
                <Text
                  className="font-medium text-typography-900 text-base"
                >
                  *
                </Text>
              </View>
              <View
                className="border-background-300 flex-row overflow-hidden content-center data-[hover=true]:border-outline-400 data-[focus=true]:border-primary-700 data-[focus=true]:hover:border-primary-700 data-[disabled=true]:opacity-40 data-[disabled=true]:hover:border-background-300 items-center h-11 rounded border data-[invalid=true]:border-error-700 data-[invalid=true]:hover:border-error-700 data-[invalid=true]:data-[focus=true]:border-error-700 data-[invalid=true]:data-[focus=true]:hover:border-error-700 data-[invalid=true]:data-[disabled=true]:hover:border-error-700 data-[focus=true]:web:ring-1 data-[focus=true]:web:ring-inset data-[focus=true]:web:ring-indicator-primary data-[invalid=true]:web:ring-1 data-[invalid=true]:web:ring-inset data-[invalid=true]:web:ring-indicator-error data-[invalid=true]:data-[focus=true]:hover:web:ring-1 data-[invalid=true]:data-[focus=true]:hover:web:ring-inset data-[invalid=true]:data-[focus=true]:hover:web:ring-indicator-error data-[invalid=true]:data-[disabled=true]:hover:web:ring-1 data-[invalid=true]:data-[disabled=true]:hover:web:ring-inset data-[invalid=true]:data-[disabled=true]:hover:web:ring-indicator-error my-1"
                dataSet={
                  {
                    "disabled": "false",
                    "focus": "false",
                    "focusVisible": "false",
                    "hover": "false",
                    "invalid": "false",
                    "readonly": "false",
                    "required": "true",
                  }
                }
                states={
                  {
                    "disabled": false,
                    "focus": false,
                    "focusVisible": false,
                    "hover": undefined,
                    "invalid": false,
                    "readonly": false,
                    "required": true,
                  }
                }
              >
                <TextInput
                  accessible={true}
                  aria-label="Input Field"
                  aria-required={true}
                  aria-selected={false}
                  className="flex-1 text-typography-900 py-0 px-3 placeholder:text-typography-500 h-full ios:leading-[0px] web:cursor-text web:data-[disabled=true]:cursor-not-allowed web:outline-0 web:outline-none text-lg"
                  dataSet={
                    {
                      "disabled": "false",
                      "focus": "false",
                      "focusVisible": "false",
                      "hover": "false",
                      "invalid": "false",
                      "readonly": "false",
                      "required": "true",
                    }
                  }
                  onBlur={[Function]}
                  onChangeText={[Function]}
                  onFocus={[Function]}
                  onKeyPress={[Function]}
                  readOnly={false}
                  secureTextEntry={true}
                  states={
                    {
                      "disabled": undefined,
                      "focus": false,
                      "focusVisible": false,
                      "hover": undefined,
                      "invalid": false,
                      "readonly": false,
                      "required": true,
                    }
                  }
                  type="password"
                  value=""
                />
              </View>
            </View>
            <View
              className="flex-row justify-between"
            >
              <View
                accessibilityState={
                  {
                    "busy": undefined,
                    "checked": undefined,
                    "disabled": undefined,
                    "expanded": undefined,
                    "selected": undefined,
                  }
                }
                accessibilityValue={
                  {
                    "max": undefined,
                    "min": undefined,
                    "now": undefined,
                    "text": undefined,
                  }
                }
                accessible={true}
                className="group/button flex-row items-center justify-center data-[focus-visible=true]:web:outline-none data-[focus-visible=true]:web:ring-2 data-[disabled=true]:opacity-40 gap-2 bg-primary-500 data-[hover=true]:bg-primary-600 data-[active=true]:bg-primary-700 border-primary-300 data-[hover=true]:border-primary-400 data-[active=true]:border-primary-500 data-[focus-visible=true]:web:ring-indicator-info px-6 h-11 mt-4 w-full rounded-[8px]"
                collapsable={false}
                dataSet={
                  {
                    "active": "false",
                    "disabled": "false",
                    "focus": "false",
                    "focusVisible": "false",
                    "hover": "false",
                  }
                }
                focusable={true}
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                role="button"
                states={
                  {
                    "active": false,
                    "disabled": undefined,
                    "focus": false,
                    "focusVisible": false,
                    "hover": false,
                  }
                }
                testID="submit-button"
              >
                <Text
                  className="font-semibold web:select-none text-lg text-typography-0 data-[hover=true]:text-typography-0 data-[active=true]:text-typography-0"
                  dataSet={
                    {
                      "active": false,
                      "disabled": undefined,
                      "focus": false,
                      "focusVisible": false,
                      "hover": false,
                    }
                  }
                  states={
                    {
                      "active": false,
                      "disabled": undefined,
                      "focus": false,
                      "focusVisible": false,
                      "hover": false,
                    }
                  }
                >
                  Sign up
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        className="flex-row w-full p-4 justify-center items-center gap-4"
      >
        <View
          className="flex flex-col items-center border-b-[1px] border-gray-300 w-[48%]"
        />
        <Text
          className="text-typography-700 font-body text-base"
        >
          or
        </Text>
        <View
          className="flex flex-col items-center border-b-[1px] border-gray-300 w-[48%]"
        />
      </View>
      <View
        className="gap-3 flex-col"
        flexDirection="row"
        testID="social-fields"
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          className="group/button rounded flex-row items-center justify-center data-[focus-visible=true]:web:outline-none data-[focus-visible=true]:web:ring-2 data-[disabled=true]:opacity-40 gap-2 data-[hover=true]:border-primary-400 data-[active=true]:border-primary-500 data-[focus-visible=true]:web:ring-indicator-info border px-5 h-10 bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent border-gray-300 mb-4"
          collapsable={false}
          dataSet={
            {
              "active": "false",
              "disabled": "false",
              "focus": "false",
              "focusVisible": "false",
              "hover": "false",
            }
          }
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          role="button"
          states={
            {
              "active": false,
              "disabled": undefined,
              "focus": false,
              "focusVisible": false,
              "hover": false,
            }
          }
          style={{}}
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="16"
            bbWidth="16"
            focusable={false}
            height="16"
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 16,
                  "width": 16,
                },
              ]
            }
            vbHeight={16}
            vbWidth={16}
            width="16"
          >
            <RNSVGGroup
              fill={
                {
                  "payload": 4278190080,
                  "type": 0,
                }
              }
            >
              <RNSVGDefs>
                <RNSVGClipPath
                  fill={
                    {
                      "payload": 4278190080,
                      "type": 0,
                    }
                  }
                  name="clipPath1652994716"
                >
                  <RNSVGPath
                    d="M0 0L16 0L16 16L0 16L0 0Z"
                    fill={
                      {
                        "payload": 4278190080,
                        "type": 0,
                      }
                    }
                    matrix={
                      [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0,
                      ]
                    }
                  />
                </RNSVGClipPath>
              </RNSVGDefs>
              <RNSVGGroup
                fill={
                  {
                    "payload": 4278190080,
                    "type": 0,
                  }
                }
              >
                <RNSVGPath
                  d="M5.31752 0.432864C3.71887 0.98745 2.3402 2.04007 1.38401 3.43612C0.427816 4.83216 -0.0554932 6.49804 0.00507043 8.18907C0.0656341 9.8801 0.666878 11.5071 1.72049 12.8312C2.7741 14.1553 4.22454 15.1066 5.85877 15.5454C7.18367 15.8872 8.57178 15.9022 9.90377 15.5891C11.1104 15.3181 12.226 14.7383 13.1413 13.9066C14.0939 13.0145 14.7853 11.8797 15.1413 10.6241C15.5282 9.2587 15.597 7.82278 15.3425 6.42661L7.90252 6.42661L7.90252 9.51286L12.2113 9.51286C12.1252 10.0051 11.9406 10.4749 11.6687 10.8942C11.3968 11.3134 11.0431 11.6735 10.6288 11.9529C10.1026 12.3009 9.50951 12.5351 8.88752 12.6404C8.2637 12.7564 7.62384 12.7564 7.00002 12.6404C6.36775 12.5096 5.76964 12.2487 5.24377 11.8741C4.39895 11.2761 3.76461 10.4265 3.43127 9.44661C3.09229 8.44836 3.09229 7.36612 3.43127 6.36786C3.66855 5.66813 4.06081 5.03103 4.57877 4.50411C5.17151 3.89005 5.92193 3.45111 6.74771 3.23546C7.57349 3.01981 8.44272 3.03578 9.26002 3.28161C9.89848 3.4776 10.4823 3.82004 10.965 4.28161C11.4509 3.79828 11.9359 3.3137 12.42 2.82786C12.67 2.56661 12.9425 2.31786 13.1888 2.05036C12.452 1.36471 11.5871 0.831185 10.6438 0.480364C8.9259 -0.143399 7.04624 -0.160162 5.31752 0.432864Z"
                  fill={
                    {
                      "payload": 4294967295,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      0.256233,
                      0.0933862,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
                <RNSVGPath
                  d="M4.47875 0.433471C6.20733 -0.159957 8.08699 -0.143636 9.805 0.479721C10.7485 0.832926 11.613 1.36902 12.3488 2.05722C12.0988 2.32472 11.835 2.57472 11.58 2.83472C11.095 3.31889 10.6104 3.80139 10.1262 4.28222C9.64356 3.82064 9.05971 3.47821 8.42125 3.28222C7.60422 3.03552 6.73502 3.01863 5.90902 3.2334C5.08303 3.44817 4.33214 3.8863 3.73875 4.49972C3.22079 5.02664 2.82853 5.66374 2.59125 6.36347L0 4.35722C0.92751 2.51792 2.53344 1.111 4.47875 0.433471Z"
                  fill={
                    {
                      "payload": 4293080617,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      1.095,
                      0.0927787,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
                <RNSVGPath
                  d="M0.154996 1.9875C0.294273 1.29724 0.525501 0.628783 0.842496 0L3.43375 2.01125C3.09476 3.00951 3.09476 4.09174 3.43375 5.09C2.57041 5.75667 1.70666 6.42667 0.842496 7.1C0.0489348 5.5204 -0.193088 3.72063 0.154996 1.9875Z"
                  fill={
                    {
                      "payload": 4294491392,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      0.252504,
                      4.45,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
                <RNSVGPath
                  d="M0.000555556 0L7.44056 0C7.69505 1.39617 7.62621 2.83209 7.23931 4.1975C6.88335 5.4531 6.19191 6.58793 5.23931 7.48C4.40306 6.8275 3.56306 6.18 2.72681 5.5275C3.1414 5.24785 3.49527 4.88737 3.76719 4.46767C4.03912 4.04796 4.22351 3.57768 4.30931 3.085L0.000555556 3.085C-0.000694444 2.0575 0.000555556 1.02875 0.000555556 0Z"
                  fill={
                    {
                      "payload": 4283989437,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      8.15819,
                      6.51875,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
                <RNSVGPath
                  d="M0 2.01C0.864167 1.34333 1.72792 0.673333 2.59125 0C2.92526 0.980247 3.56051 1.82987 4.40625 2.4275C4.93376 2.80033 5.53316 3.05916 6.16625 3.1875C6.79007 3.30349 7.42993 3.30349 8.05375 3.1875C8.67574 3.08221 9.26885 2.84804 9.795 2.5C10.6313 3.1525 11.4712 3.8 12.3075 4.4525C11.3924 5.28466 10.2768 5.86485 9.07 6.13625C7.73801 6.44938 6.3499 6.43437 5.025 6.0925C3.97713 5.81271 2.99834 5.31949 2.15 4.64375C1.25208 3.93086 0.518694 3.03247 0 2.01Z"
                  fill={
                    {
                      "payload": 4281442115,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      1.09375,
                      9.54,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGGroup>
          </RNSVGSvgView>
          <Text
            className="font-semibold web:select-none text-base text-primary-500 data-[hover=true]:text-primary-500 data-[active=true]:text-primary-500"
            dataSet={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
            states={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
          >
            Sign in with Google
          </Text>
        </View>
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          className="group/button rounded flex-row items-center justify-center data-[focus-visible=true]:web:outline-none data-[focus-visible=true]:web:ring-2 data-[disabled=true]:opacity-40 gap-2 data-[hover=true]:border-primary-400 data-[active=true]:border-primary-500 data-[focus-visible=true]:web:ring-indicator-info border px-5 h-10 bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent border-gray-300 mb-4"
          collapsable={false}
          dataSet={
            {
              "active": "false",
              "disabled": "false",
              "focus": "false",
              "focusVisible": "false",
              "hover": "false",
            }
          }
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          role="button"
          states={
            {
              "active": false,
              "disabled": undefined,
              "focus": false,
              "focusVisible": false,
              "hover": false,
            }
          }
          style={{}}
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="16"
            bbWidth="16"
            focusable={false}
            height="16"
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 16,
                  "width": 16,
                },
              ]
            }
            vbHeight={16}
            vbWidth={16}
            width="16"
          >
            <RNSVGGroup
              fill={
                {
                  "payload": 4278190080,
                  "type": 0,
                }
              }
            >
              <RNSVGDefs>
                <RNSVGClipPath
                  fill={
                    {
                      "payload": 4278190080,
                      "type": 0,
                    }
                  }
                  name="clipPath6664416525"
                >
                  <RNSVGPath
                    d="M0 0L16 0L16 16L0 16L0 0Z"
                    fill={
                      {
                        "payload": 4278190080,
                        "type": 0,
                      }
                    }
                    matrix={
                      [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0,
                      ]
                    }
                  />
                </RNSVGClipPath>
              </RNSVGDefs>
              <RNSVGGroup
                fill={
                  {
                    "payload": 4278190080,
                    "type": 0,
                  }
                }
              >
                <RNSVGPath
                  d="M0.81625 0C0.365448 0 0 0.365448 0 0.81625L0 13.9775C0 14.4283 0.365448 14.7937 0.81625 14.7937L13.9775 14.7937C14.4283 14.7937 14.7937 14.4283 14.7937 13.9775L14.7937 0.81625C14.7937 0.365448 14.4283 0 13.9775 0L0.81625 0Z"
                  fill={
                    {
                      "payload": 4282210968,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      0.60375,
                      0.60375,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
                <RNSVGPath
                  d="M4.2325 12.559L4.2325 6.83021L6.155 6.83021L6.4425 4.59771L4.2325 4.59771L4.2325 3.17271C4.2325 2.52646 4.4125 2.08521 5.33875 2.08521L6.52125 2.08521L6.52125 0.0852073C5.94863 0.025639 5.3732 -0.00273603 4.7975 0.000207503C3.095 0.000207503 1.9225 1.03771 1.9225 2.95146L1.9225 4.59771L0 4.59771L0 6.83021L1.9225 6.83021L1.9225 12.559L4.2325 12.559Z"
                  fill={
                    {
                      "payload": 4294967295,
                      "type": 0,
                    }
                  }
                  matrix={
                    [
                      1,
                      0,
                      0,
                      1,
                      6.5775,
                      2.83729,
                    ]
                  }
                  propList={
                    [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGGroup>
          </RNSVGSvgView>
          <Text
            className="font-semibold web:select-none text-base text-primary-500 data-[hover=true]:text-primary-500 data-[active=true]:text-primary-500"
            dataSet={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
            states={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
          >
            Sign in with Facebook
          </Text>
        </View>
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          className="group/button rounded flex-row items-center justify-center data-[focus-visible=true]:web:outline-none data-[focus-visible=true]:web:ring-2 data-[disabled=true]:opacity-40 gap-2 data-[hover=true]:border-primary-400 data-[active=true]:border-primary-500 data-[focus-visible=true]:web:ring-indicator-info border px-5 h-10 bg-transparent data-[hover=true]:bg-background-50 data-[active=true]:bg-transparent border-gray-300 mb-4"
          collapsable={false}
          dataSet={
            {
              "active": "false",
              "disabled": "false",
              "focus": "false",
              "focusVisible": "false",
              "hover": "false",
            }
          }
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          role="button"
          states={
            {
              "active": false,
              "disabled": undefined,
              "focus": false,
              "focusVisible": false,
              "hover": false,
            }
          }
          style={{}}
        >
          <RNSVGSvgView
            align="xMidYMid"
            bbHeight="14"
            bbWidth="14"
            focusable={false}
            height="14"
            meetOrSlice={0}
            minX={0}
            minY={0}
            style={
              [
                {
                  "backgroundColor": "transparent",
                  "borderWidth": 0,
                },
                {
                  "flex": 0,
                  "height": 14,
                  "width": 14,
                },
              ]
            }
            vbHeight={14}
            vbWidth={14}
            width="14"
          >
            <RNSVGGroup
              fill={
                {
                  "payload": 4278190080,
                  "type": 0,
                }
              }
            >
              <RNSVGPath
                d="M11.025 0L13.172 0L8.482 5.374L14 12.688L9.68 12.688L6.294 8.253L2.424 12.688L0.275 12.688L5.291 6.938L0 0.000999987L4.43 0.000999987L7.486 4.054L11.025 0ZM10.27 11.4L11.46 11.4L3.78 1.221L2.504 1.221L10.27 11.4Z"
                fill={
                  {
                    "payload": 4278190080,
                    "type": 0,
                  }
                }
                matrix={
                  [
                    1,
                    0,
                    0,
                    1,
                    0,
                    -0.00000584126,
                  ]
                }
                propList={
                  [
                    "fill",
                  ]
                }
              />
            </RNSVGGroup>
          </RNSVGSvgView>
          <Text
            className="font-semibold web:select-none text-base text-primary-500 data-[hover=true]:text-primary-500 data-[active=true]:text-primary-500"
            dataSet={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
            states={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
          >
            Sign in with X/Twitter
          </Text>
        </View>
      </View>
      <View
        className="w-full p-4 border-b-[1px] h-1 mb-4 border-gray-300"
      />
      <View
        className="flex-row justify-center items-center"
      >
        <Text
          className="text-typography-700 font-body text-base"
        >
          Have an account? 
        </Text>
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          className="group/button rounded flex-row items-center justify-center data-[focus-visible=true]:web:outline-none data-[focus-visible=true]:web:ring-2 data-[disabled=true]:opacity-40 gap-2 border-primary-300 data-[hover=true]:border-primary-400 data-[active=true]:border-primary-500 data-[focus-visible=true]:web:ring-indicator-info h-10 px-0 bg-transparent data-[hover=true]:bg-transparent data-[active=true]:bg-transparent"
          collapsable={false}
          dataSet={
            {
              "active": "false",
              "disabled": "false",
              "focus": "false",
              "focusVisible": "false",
              "hover": "false",
            }
          }
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          role="button"
          states={
            {
              "active": false,
              "disabled": undefined,
              "focus": false,
              "focusVisible": false,
              "hover": false,
            }
          }
        >
          <Text
            className="font-semibold web:select-none data-[hover=true]:text-primary-600 data-[active=true]:text-primary-700 data-[hover=true]:underline data-[active=true]:underline text-base text-blue-500"
            dataSet={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
            states={
              {
                "active": false,
                "disabled": undefined,
                "focus": false,
                "focusVisible": false,
                "hover": false,
              }
            }
          >
            Sign in
          </Text>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
